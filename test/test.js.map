{"version":3,"file":"test.js","sourceRoot":"","sources":["test.ts"],"names":[],"mappings":"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","sourcesContent":["const restify = require('restify');\nconst rp = require('request-promise');\nconst chai = require('chai');\nconst expect = chai.expect;\n\nconst RestifyParams = require('../src/mod');\n\nimport { RestError } from 'restify-errors';\nimport { RequestParams, RouteSchema, RouteSchemas, RPServer } from '../types/restify-params';\n\nlet schemaRoutes: RouteSchemas = {\n\tgettechnos: {\n\t\tpath: '/technos',\n\t\tdescription: 'SALUT',\n\t\ttag: 'techno'\n\t},\n\tgettechnoidname: {\n\t\tpath: '/technos/:id/:name',\n\t\tdescription: 'SALUT',\n\t\ttag: 'techno'\n\t},\n\tgetusers: {\n\t\tpath: '/users',\n\t\tdescription: 'SALUT',\n\t\ttag: 'user',\n\t\tparams: {\n\t\t\tisValidated: { type: 'boolean' },\n\t\t},\n\t},\n\tgetuserid: {\n\t\tpath: '/users/:id/:name',\n\t\tdescription: 'SALUT',\n\t\ttag: 'user',\n\t\tparams: {\n\t\t\tok: { type: 'boolean' }\n\t\t}\n\t},\n\tgetcompanies: {\n\t\tpath: '/companies',\n\t\tdescription: 'SALUT',\n\t\ttag: 'company',\n\t\tparams: {\n\t\t\tstatus: {\n\t\t\t\ttype: 'string',\n\t\t\t\texpected: ['online', 'offline'],\n\t\t\t\tdefaultValue: ['online'],\n\t\t\t\tregexp: /lol/,\n\t\t\t\tmax: 2,\n\n\t\t\t},\n\t\t\tpartnership: {\n\t\t\t\ttype: 'string',\n\t\t\t}\n\t\t}\n\t}\n};\n\nasync function mockTest(path: string, { qs, body }: { qs?: any, body?: any } = {}) {\n\tfunction initServer() : Promise<RPServer> {\n\t\tconst server: RPServer = restify.createServer();\n\n\t\tserver.get(schemaRoutes.gettechnos, (req, res) => res.json(200, {}));\n\t\tserver.get(schemaRoutes.getusers, (req, res) => res.json(200, {}));\n\t\tserver.get(schemaRoutes.getuserid, (req, res) => res.json(200, {}));\n\t\tserver.post(schemaRoutes.getusers, (req, res) => res.json(200, {}));\n\n\t\tserver.use(restify.plugins.queryParser({ mapParams: true }));\n\t\tserver.use(restify.plugins.bodyParser({ mapParams: true }));\n\n\t\tserver.use(RestifyParams());\n\n\t\treturn new Promise(resolve => {\n\t\t\tserver.listen(12345, () => {\n\t\t\t\tconsole.log('Server listening @ http://localhost:12345');\n\t\t\t\treturn resolve(server);\n\t\t\t});\n\t\t});\n\t}\n\n\tconst server = await initServer();\n\tconst res = await rp.get({\n\t\turi: `http://localhost:12345${path}`,\n\t\tqs,\n\t\tbody,\n\t\tjson: true,\n\t\tresolveWithFullResponse: true\n\t});\n\texpect(res.statusCode).to.equals(200);\n\tserver.close();\n}\nfunction mockRequest(route: RouteSchema, params: RequestParams = {}, pluginsEnabled: boolean = true) {\n\treturn {\n\t\tgetRoute: () => ({ spec: route }),\n\t\tgetContentLength: () : number => Object.keys(params).length,\n\t\tparams: pluginsEnabled ? params : {},\n\t};\n}\n\n// it ('Should ', () => {\n// \tconst req = mockRequest(schemaRoutes.);\n// \tRestifyParams()(req, {}, () => {});\n//\n// \texpect(req.params).to;\n// });\n\ndescribe('Initial tests', () => {\n\tit('Should return an error if plugins are not enabled with params', done => {\n\t\tconst req = mockRequest(schemaRoutes.gettechnos, { isValidated: true }, false);\n\t\tRestifyParams()(req, {}, (err: RestError) => {\n\t\t\texpect(err).to.be.an.instanceOf(RestError);\n\t\t\tdone();\n\t\t});\n\t});\n\tit('Should set req.params to empty object if no params are passed', () => {\n\t\tconst req = mockRequest(schemaRoutes.gettechnos);\n\t\tRestifyParams()(req, {}, () => {});\n\n\t\texpect(req.params).to.eql({});\n\t});\n\tit('Should map path params to req.params', () => {\n\t\tconst req = mockRequest(schemaRoutes.gettechnoidname, { id: 'thisisanid', name: 'thisisaname' });\n\t\tRestifyParams()(req, {}, () => {});\n\n\t\texpect(req.params).to.have.all.keys(['id', 'name']);\n\t});\n\tit ('Should delete unregistered params', () => {\n\t\tconst req = mockRequest(schemaRoutes.getusers, { notRegistered: 2 });\n\t\tRestifyParams()(req, {}, () => {});\n\n\t\texpect(req.params).to.not.have.property('notRegistered');\n\t});\n\tit ('Should put the default value if param not sent', () => {\n\t\tconst req = mockRequest(schemaRoutes.getcompanies);\n\t\tRestifyParams()(req, {}, () => {});\n\n\t\texpect(req.params.status).to.equals('online');\n\t});\n\t// it ('Should check the expected option', done => {\n\t// \tlet req = mockRequest(schemaRoutes.getcompanies, { status: 'online' });\n\t// \tRestifyParams()(req, {}, () => {});\n\t//\n\t// \texpect(req.params.status).to.equals('online');\n\t//\n\t// \treq = mockRequest(schemaRoutes.getcompanies, { status: 'notValid' });\n\t// \tRestifyParams()(req, {}, (err: RestError) => {\n\t// \t\texpect(err).to.be.an.instanceOf(RestError);\n\t// \t\tdone();\n\t// \t});\n\t// });\n});\n"]}